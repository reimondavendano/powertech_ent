// src/app/services/supabase.service.ts
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { createClient, SupabaseClient, User } from '@supabase/supabase-js';
import { environment } from '../../environments/environment'; // <--- Import environment

// Define the Database interface to provide type context for Supabase
// In a real project, this would ideally be generated by the Supabase CLI (e.g., `supabase gen types typescript --schema public > types/supabase.ts`)
export interface Database {
  public: {
    Tables: {
      products: {
        Row: Product; // The type of a row in the 'products' table
        Insert: Omit<Product, 'id' | 'created_at'>; // The type of data you can insert
        Update: Partial<Omit<Product, 'id' | 'created_at'>>; // The type of data you can update
      };
      inquiries: {
        Row: Inquiry;
        Insert: Omit<Inquiry, 'id' | 'created_at' | 'status'>;
        Update: Partial<Omit<Inquiry, 'id' | 'created_at' | 'status'>>;
      };
      profiles: {
        Row: {
          id: number; // Changed to number to match SQL migration
          user_id: string;
          email: string;
          role: 'user' | 'admin';
          created_at: string;
        };
        Insert: {
          id?: number; // Make optional for insert if it's auto-generated in DB
          user_id: string;
          email: string;
          role?: 'user' | 'admin';
        };
        Update: Partial<{
          id: number;
          user_id: string;
          email: string;
          role: 'user' | 'admin';
        }>;
      };
    };
    Views: {};
    Functions: {};
    Enums: {};
    CompositeTypes: {};
  };
}

export interface Product {
  id: number; // Changed to number to match SQL migration
  name: string;
  category: string;
  price: number;
  stock: number;
  description: string;
  image_url: string;
  created_at: string;
}

export interface Inquiry {
  id: number; // Changed to number to match SQL migration
  name: string;
  email: string;
  phone: string;
  product_id: number; // Changed to number to match SQL migration
  message: string;
  status: 'pending' | 'responded' | 'closed';
  created_at: string;
}

@Injectable({
  providedIn: 'root'
})
export class SupabaseService {
  // Initialize supabase directly in the constructor using environment variables
  private supabase: SupabaseClient<Database> = createClient<Database>(
    environment.supabaseUrl,
    environment.supabaseKey
  );

  private _currentUser = new BehaviorSubject<User | null>(null);
  currentUser$ = this._currentUser.asObservable();

  constructor() {
    console.log('Supabase client initialized via environment variables.');

    // Set up auth state listener
    this.supabase.auth.onAuthStateChange((event, session) => {
      this._currentUser.next(session?.user || null);
    });
  }

  get client(): SupabaseClient<Database> {
    return this.supabase;
  }

  // Supabase Authentication methods
  async signIn(email: string, password: string): Promise<{ data: { user: User | null } | null, error: any }> {
    const { data, error } = await this.client.auth.signInWithPassword({ email, password });
    if (error) {
      console.error('Supabase signIn error:', error.message);
      return { data: null, error };
    }
    return { data: { user: data.user }, error: null };
  }

  async signOut(): Promise<{ error: any }> {
    const { error } = await this.client.auth.signOut();
    if (error) {
      console.error('Supabase signOut error:', error.message);
      return { error };
    }
    return { error: null };
  }

  // Product methods
  async getProducts(): Promise<{ data: Product[] | null, error: any }> {
    const { data, error } = await this.client.from('products').select('*');
    if (error) {
      console.error('Supabase getProducts error:', error.message);
      return { data: null, error };
    }
    return { data, error: null };
  }

  async getProduct(id: number): Promise<{ data: Product | null, error: any }> {
    const { data, error } = await this.client.from('products').select('*').eq('id', id).single();
    if (error) {
      console.error('Supabase getProduct error:', error.message);
      return { data: null, error };
    }
    return { data, error: null };
  }

  async createProduct(product: Omit<Product, 'id' | 'created_at'>): Promise<{ data: Product | null, error: any }> {
    const { data, error } = await this.client.from('products').insert([product]).select().single();
    if (error) {
      console.error('Supabase createProduct error:', error.message);
      return { data: null, error };
    }
    return { data, error: null };
  }

  async updateProduct(id: number, updates: Partial<Product>): Promise<{ data: Product | null, error: any }> {
    const { data, error } = await this.client.from('products').update(updates).eq('id', id).select().single();
    if (error) {
      console.error('Supabase updateProduct error:', error.message);
      return { data: null, error };
    }
    return { data, error: null };
  }

  async deleteProduct(id: number): Promise<{ error: any }> {
    const { error } = await this.client.from('products').delete().eq('id', id);
    if (error) {
      console.error('Supabase deleteProduct error:', error.message);
      return { error };
    }
    return { error: null };
  }

  // Inquiry methods
  async getInquiries(): Promise<{ data: Inquiry[] | null, error: any }> {
    const { data, error } = await this.client.from('inquiries').select('*');
    if (error) {
      console.error('Supabase getInquiries error:', error.message);
      return { data: null, error };
    }
    return { data, error: null };
  }

  async createInquiry(inquiry: Omit<Inquiry, 'id' | 'created_at' | 'status'>): Promise<{ data: Inquiry | null, error: any }> {
    // Ensure product_id is passed as a number when calling this method.
    // Example: { ..., product_id: 1, ... } NOT { ..., product_id: '1', ... }
    const { data, error } = await this.client.from('inquiries').insert([inquiry]).select().single();
    if (error) {
      console.error('Supabase createInquiry error:', error.message);
      return { data: null, error };
    }
    return { data, error: null };
  }

  async updateInquiryStatus(id: number, status: Inquiry['status']): Promise<{ data: Inquiry | null, error: any }> {
    const { data, error } = await this.client.from('inquiries').update({ status }).eq('id', id).select().single();
    if (error) {
      console.error('Supabase updateInquiryStatus error:', error.message);
      return { data: null, error };
    }
    return { data, error: null };
    }
}